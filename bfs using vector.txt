void AdjListBFS(vector< vector<int> > adjList, int start)
    {
    cout << "\nDoing a BFS on an adjacency list.\n";
    
    int n = adjList.size();
    // Create a "visited" array (true or false) to keep track of if we visited a vertex.
    bool visited[n] = { false };
    
    // Create a queue for the nodes we visit.
    queue<int> q;
    
    // Add the starting vertex to the queue and mark it as visited.
    q.push(start);
    visited[start] = true;
    
    // While the queue is not empty..
    while(q.empty() == false)
        {
        int vertex = q.front();
        q.pop();
        
        // Doing +1 in the cout because our graph is 1-based indexing, but our code is 0-based.
        cout << vertex+1 << " ";
        
        // Loop through all of it's friends.
        for(int i = 0; i < adjList[vertex].size(); i++)
            {
            // If the friend hasn't been visited yet, add it to the queue and mark it as visited
            int neighbor = adjList[vertex][i];
            
            if(visited[neighbor] == false)
                {
                q.push(neighbor);
                visited[neighbor] = true;
                }
            }
        }
    cout << endl << endl;
    return;
    }
    
    
// Given an Adjacency Matrix, do a BFS on vertex "start"
void AdjMatrixBFS(vector< vector<int> > adjMatrix, int start)
    {
    cout << "\nDoing a BFS on an adjacency list.\n";
    
    int n = adjMatrix.size();
    // Create a "visited" array (true or false) to keep track of if we visited a vertex.
    bool visited[n] = { false };
    
    // Create a queue for the nodes we visit.
    queue<int> q;
    
    // Add the starting vertex to the queue and mark it as visited.
    q.push(start);
    visited[start] = true;
    
    // While the queue is not empty..
    while(q.empty() == false)
        {
        int vertex = q.front();
        q.pop();
        
        // Doing +1 in the cout because our graph is 1-based indexing, but our code is 0-based.
        cout << vertex+1 << " ";
        
        // Loop through all of it's friends.
        for(int i = 0; i < adjMatrix[vertex].size(); i++)
            {
            
            // The neighbor is the column number, and the edge is the value in the matrix.
            int neighbor = i;
            int edge = adjMatrix[vertex][i];
            
            // If the edge is "0" it means this guy isn't a neighbor. Move on.
            if(edge == 0) { continue; }
            
            // If the friend hasn't been visited yet, add it to the queue and mark it as visited
            if(visited[neighbor] == false)
                {
                q.push(neighbor);
                visited[neighbor] = true;
                }
            }
        }
    cout << endl << endl;
    return;
    }
    
